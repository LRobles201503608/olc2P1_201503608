/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,11],$V2=[1,12],$V3=[1,17],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,20],$V8=[1,21],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[2,5,14,17,22,37,38,39,48,53,63,64,70,74,75,76,82],$Vh=[2,23],$Vi=[1,59],$Vj=[1,50],$Vk=[1,60],$Vl=[1,52],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,53],$Vu=[1,57],$Vv=[2,35],$Vw=[1,63],$Vx=[2,5,14,17,22,31,37,38,39,44,48,53,63,64,70,74,75,76,82,85,87,89],$Vy=[1,66],$Vz=[2,5,14,17,22,37,38,39,44,48,53,63,64,70,74,75,76,82],$VA=[1,67],$VB=[2,47],$VC=[1,70],$VD=[1,71],$VE=[2,5,14,17,22,37,38,39,44,48,51,53,63,64,70,74,75,76,82,85,87,89],$VF=[2,5,14,17,22,37,38,39,44,48,53,63,64,70,74,75,76,82,85,87,89],$VG=[1,80],$VH=[1,84],$VI=[1,86],$VJ=[1,85],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[1,90],$VO=[1,91],$VP=[1,92],$VQ=[1,93],$VR=[1,94],$VS=[1,95],$VT=[1,96],$VU=[1,97],$VV=[1,98],$VW=[5,14,17,23,24,31,33,34,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,102,103,104,105,106,107,108,110,111,112,113,114,115,120],$VX=[2,190],$VY=[2,5,14,17,22,23,24,31,33,34,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,103,104,105,106,107,108,110,111,112,113,114,115,120],$VZ=[34,51,102,103,104,105,106,107,108,110,111,112,113,114,115],$V_=[2,5,14,17,22,23,24,31,33,34,37,38,39,44,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,103,104,105,106,107,108,110,111,112,113,114,115,120],$V$=[33,34,102,103,104,105,106,107,108,110,111,112,113,114,115],$V01=[5,14,17,22,34,37,38,39,44,48,53,63,64,70,74,75,76,82,85,87,89],$V11=[1,115],$V21=[5,14,17,31,34,37,38,39,44,48,51,53,63,64,70,74,75,76,82,85,87,89,102,103,104,105,106,107,108,110,111,112,113,114,115],$V31=[1,122],$V41=[34,102,103,104,105,106,107,108,110,111,112,113,114,115],$V51=[1,124],$V61=[23,33],$V71=[1,144],$V81=[1,142],$V91=[1,141],$Va1=[2,5,14,17,22,23,24,31,33,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,103,104,105,106,107,108,110,111,112,115,120],$Vb1=[2,5,14,17,22,23,24,31,32,33,34,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,103,104,105,106,107,108,110,111,112,113,114,115,120],$Vc1=[1,170],$Vd1=[24,34,102,103,104,105,106,107,108,110,111,112,113,114,115],$Ve1=[5,14,17,31,34,37,38,39,44,48,53,63,64,70,74,75,76,82,85,87,89,102,103,104,105,106,107,108,110,111,112,113,114,115],$Vf1=[1,178],$Vg1=[1,175],$Vh1=[1,176],$Vi1=[1,177],$Vj1=[1,179],$Vk1=[2,5,14,17,22,31,34,37,38,39,44,48,53,63,64,70,74,75,76,82,85,87,89],$Vl1=[2,5,14,17,22,23,24,33,34,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,103,104,105,106,107,108,110,111,112,113,114,115,120],$Vm1=[2,17,22,37,38,39,44,63,70,74,75,76,82,85,87,89],$Vn1=[2,5,14,17,22,23,24,31,33,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,120],$Vo1=[2,5,14,17,22,23,24,31,33,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,107,108,110,111,112,115,120],$Vp1=[2,5,14,17,22,23,24,31,33,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,103,104,107,108,110,111,112,115,120],$Vq1=[2,5,14,17,22,23,24,31,33,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,107,108,110,115,120],$Vr1=[2,5,14,17,22,23,24,31,33,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,107,108,110,111,112,115,120],$Vs1=[2,42],$Vt1=[5,14,17,22,23,31,34,37,38,39,42,44,48,51,53,63,64,70,74,75,76,82,85,87,89],$Vu1=[2,87],$Vv1=[1,224],$Vw1=[1,223],$Vx1=[2,5,14,17,22,23,31,34,37,38,39,42,44,48,51,53,63,64,70,74,75,76,82,85,87,89],$Vy1=[2,5,14,17,22,23,31,32,37,38,39,44,48,53,63,64,70,74,75,76,82,85,87,89],$Vz1=[5,14,17,22,31,34,37,38,39,44,48,53,63,64,70,74,75,76,82,85,87,89],$VA1=[2,43],$VB1=[1,233],$VC1=[1,246],$VD1=[2,76],$VE1=[1,258],$VF1=[1,266],$VG1=[2,5,14,17,22,23,31,32,34,37,38,39,42,44,48,51,53,63,64,70,74,75,76,82,85,87,89],$VH1=[34,44,102,103,104,105,106,107,108,110,111,112,113,114,115],$VI1=[1,283],$VJ1=[1,284],$VK1=[31,34,102,103,104,105,106,107,108,110,111,112,113,114,115],$VL1=[1,300],$VM1=[1,306],$VN1=[1,307],$VO1=[2,14,17,22,37,38,39,44,53,63,64,70,74,75,76,82],$VP1=[2,5,14,17,22,37,38,39,44,48,53,63,64,70,74,75,76,80,82,85,87,89],$VQ1=[44,85,87],$VR1=[34,44],$VS1=[1,354];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"inicio":4,"EOF":5,"l_ins":6,"ins":7,"asignacion_declaracion":8,"asignacion":9,"metodo_funcion":10,"structs":11,"funciones_nativas":12,"sentencias":13,"RETURN":14,"retorno":15,"final_linea":16,"CONTINUE":17,"l_ins2":18,"ins2":19,"expresion":20,"constancia":21,"IDENTIFICADOR":22,"IGUAL":23,"DOSP":24,"tipo":25,"lista_asigna":26,"arreglo_mat":27,"arreglo_mat2":28,"llamado_funcion":29,"acceso":30,"PYCOMA":31,"CORCHETEA":32,"CORCHETEC":33,"COMA":34,"asigl":35,"arreglo_params":36,"RLET":37,"RCONST":38,"RVAR":39,"actualizar":40,"asignacion_types":41,"LLA":42,"contenido_types":43,"LLC":44,"INCREMENTO":45,"DECREMENTO":46,"PUNTO":47,"RFUNCTION":48,"PARENTA":49,"parametro":50,"PARENTC":51,"parametro2":52,"RTYPE":53,"contenido_struct":54,"RSTRING":55,"dimensional":56,"RINT":57,"boolean":58,"VOID":59,"dimensional2":60,"imprimir":61,"graficar":62,"PRINT":63,"RGRAFICA":64,"sentenciafor":65,"sentenciawhile":66,"sentenciadowhile":67,"sentenciaif":68,"sentenciaswitch":69,"FOR":70,"cuerposentencia":71,"ROF":72,"RIN":73,"WHILE":74,"DO":75,"IF":76,"cuerposentencia2":77,"selse":78,"selseif":79,"ELSE":80,"sinosi":81,"SWITCH":82,"listacase":83,"cases":84,"CASE":85,"instrucciones_funciones":86,"DEFAULT":87,"instru_f":88,"BREAK":89,"instrucciones_funciones2":90,"instru_f2":91,"parammm":92,"parametraje":93,"MENOS":94,"ENTERO":95,"TRUE":96,"FALSE":97,"DECIMAL":98,"CADENA":99,"CADENAE":100,"LENGTH":101,"MAS":102,"POR":103,"DIVIDIDO":104,"POT":105,"MOD":106,"AND":107,"OR":108,"NOT":109,"DIF":110,"MAYIGU":111,"MENIGU":112,"MAY":113,"MEN":114,"IG":115,"op_terna":116,"RNULL":117,"nativo_mat":118,"condicion":119,"INTERROGACION":120,"POP":121,"PUSH":122,"lista_push":123,"funciones_mat":124,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"RETURN",17:"CONTINUE",22:"IDENTIFICADOR",23:"IGUAL",24:"DOSP",31:"PYCOMA",32:"CORCHETEA",33:"CORCHETEC",34:"COMA",37:"RLET",38:"RCONST",39:"RVAR",42:"LLA",44:"LLC",45:"INCREMENTO",46:"DECREMENTO",47:"PUNTO",48:"RFUNCTION",49:"PARENTA",51:"PARENTC",53:"RTYPE",55:"RSTRING",57:"RINT",58:"boolean",59:"VOID",63:"PRINT",64:"RGRAFICA",70:"FOR",72:"ROF",73:"RIN",74:"WHILE",75:"DO",76:"IF",80:"ELSE",82:"SWITCH",85:"CASE",87:"DEFAULT",89:"BREAK",94:"MENOS",95:"ENTERO",96:"TRUE",97:"FALSE",98:"DECIMAL",99:"CADENA",100:"CADENAE",101:"LENGTH",102:"MAS",103:"POR",104:"DIVIDIDO",105:"POT",106:"MOD",107:"AND",108:"OR",109:"NOT",110:"DIF",111:"MAYIGU",112:"MENIGU",113:"MAY",114:"MEN",115:"IG",117:"RNULL",120:"INTERROGACION",121:"POP",122:"PUSH"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[7,2],[18,2],[18,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,3],[19,2],[15,1],[15,0],[8,5],[8,3],[8,7],[8,5],[8,3],[8,4],[8,6],[8,1],[8,1],[8,1],[16,1],[16,0],[27,3],[27,2],[26,4],[26,2],[26,6],[26,4],[35,2],[35,0],[35,1],[36,3],[36,1],[36,0],[21,1],[21,1],[21,1],[9,4],[9,5],[9,1],[9,1],[41,5],[43,5],[43,3],[40,2],[40,2],[30,5],[30,3],[30,1],[10,8],[10,7],[10,7],[10,6],[10,10],[10,9],[10,9],[10,8],[50,4],[50,2],[50,1],[52,5],[52,3],[52,0],[11,6],[54,5],[54,3],[25,2],[25,2],[25,2],[25,2],[25,1],[56,3],[56,2],[56,0],[56,1],[60,4],[60,3],[60,0],[60,1],[12,1],[12,1],[61,3],[61,4],[62,3],[13,1],[13,1],[13,1],[13,1],[13,1],[65,12],[65,10],[65,12],[65,10],[65,8],[65,8],[66,5],[67,7],[68,5],[68,6],[68,6],[68,7],[78,2],[79,2],[79,1],[81,6],[69,7],[83,2],[83,1],[84,4],[84,3],[84,3],[84,2],[71,3],[71,2],[86,2],[86,1],[88,2],[88,1],[88,1],[88,2],[88,2],[88,2],[88,1],[77,3],[77,2],[90,2],[90,1],[91,2],[91,1],[91,2],[91,2],[91,1],[91,1],[29,5],[29,4],[92,3],[92,1],[93,3],[93,1],[20,2],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,2],[20,4],[20,3],[20,1],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,1],[20,1],[20,1],[20,1],[20,3],[20,1],[20,1],[28,3],[28,0],[28,1],[116,5],[119,3],[119,3],[119,2],[119,3],[119,3],[119,3],[119,3],[119,3],[119,3],[118,3],[118,4],[118,1],[123,3],[123,1],[124,2],[124,0],[124,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
        
break;
case 98: case 99: case 100: case 101: case 102: case 132: case 142: case 164: case 182:
this.$=$$[$0];
break;
case 126: case 130: case 135: case 137: case 141: case 144:
this.$=$$[$0-1];
break;
case 127: case 138:
this.$="VACIO"
break;
case 128: case 139:
$$[$0-1].push($$[$0]);  this.$ = $$[$0-1];
break;
case 129: case 140:
this.$ = [$$[$0]];
break;
case 131:
this.$=$$[$0]
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,17:$V2,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,48:$V7,53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},{1:[3]},{5:[1,39]},{2:$V0,5:[2,2],7:40,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,17:$V2,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,48:$V7,53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o([5,14,17,31,34,37,38,39,48,53,63,64,70,74,75,76,82,102,103,104,105,106,107,108,110,111,112,113,114,115],$Vh,{15:41,20:42,40:51,29:54,28:55,116:56,30:58,119:61,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vg,$Vv,{16:62,31:$Vw}),{22:[1,64],26:65},o($Vx,[2,31]),o($Vx,[2,32],{47:$Vy}),o($Vz,[2,33]),o([5,14,17,31,37,38,39,44,47,48,53,63,64,70,74,75,76,82,85,87,89],[2,62],{40:51,29:54,28:55,116:56,30:58,119:61,36:68,20:72,2:$Vi,22:$Vj,23:$VA,32:$Vk,34:$VB,102:$VB,103:$VB,104:$VB,105:$VB,106:$VB,107:$VB,108:$VB,110:$VB,111:$VB,112:$VB,113:$VB,114:$VB,115:$VB,45:$VC,46:$VD,49:[1,69],94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VE,[2,53]),o($VE,[2,54]),{22:[1,73]},{22:[1,74]},o($Vz,[2,93]),o($Vz,[2,94]),o($VF,[2,98]),o($VF,[2,99]),o($VF,[2,100]),o($VF,[2,101]),o($VF,[2,102]),{22:[2,48]},{22:[2,49]},{22:[2,50]},{49:[1,75]},{49:[1,76]},{49:[1,77]},{49:[1,78]},{42:$VG,71:79},{49:[1,81]},{49:[1,82]},{1:[2,1]},o($Vg,[2,3]),o($Vg,$Vv,{16:83,31:$Vw}),o([2,5,14,17,22,31,37,38,39,44,48,53,63,64,70,74,75,76,82],[2,22],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:99,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VY,[2,154]),o($VY,[2,155]),o($VY,[2,156]),o($VY,[2,157]),o($VY,[2,158]),o($VY,[2,159]),o([5,14,17,22,23,24,31,33,34,37,38,39,44,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,103,104,105,106,107,108,110,111,112,113,114,115,120],[2,160],{60:100,2:[1,104],32:[1,103],45:$VC,46:$VD,47:[1,101],49:[1,102]}),o($VY,[2,164]),o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:105,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:106,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VY,[2,182]),o($VY,[2,183]),o($VY,[2,184]),o($VY,[2,185]),o($V_,[2,187],{47:$Vy}),o($VY,[2,188]),o($V$,$VB,{40:51,29:54,28:55,116:56,30:58,119:61,20:72,36:107,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{120:[1,108]},o($Vg,[2,12]),o($VY,[2,34]),o($V01,$Vv,{16:110,27:112,35:113,2:$V11,23:[1,109],24:[1,111],31:$Vw,32:[1,114]}),o($VF,$Vv,{16:116,31:$Vw,34:[1,117]}),{22:[1,118]},o($V21,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:119,2:$Vi,22:$Vj,32:$Vk,42:[1,120],49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{23:[1,121],34:$V31},o($V41,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,92:123,20:125,2:$Vi,22:$Vj,32:$Vk,49:$Vl,51:$V51,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VY,[2,58]),o($VY,[2,59]),o($V61,[2,46],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{49:[1,126]},{23:[1,127]},o($V41,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:129,2:$Vi,22:$Vj,32:$Vk,49:$Vl,51:[1,128],94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{51:[1,130]},{37:[1,131],39:[1,132]},o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:133,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{74:[1,134]},{2:$V71,8:138,9:139,13:140,17:$V81,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,136],61:143,63:$V9,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf,86:135,88:137,89:$V91},o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:145,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:146,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vg,[2,11]),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:147,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:148,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:149,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:150,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:151,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:152,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:153,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:154,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:155,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:156,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:157,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:158,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:159,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:160,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:161,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Va1,[2,153],{34:$VH,113:$VT,114:$VU}),o($V_,[2,161],{32:[1,163],47:[1,162]}),{101:[1,164],118:165,121:[1,166],122:[1,167]},o($V41,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,92:123,20:168,2:$Vi,22:$Vj,32:$Vk,49:$Vl,51:$V51,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($V$,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:169,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vb1,[2,92]),{34:$VH,51:$Vc1,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($Va1,[2,175],{34:$VH,113:$VT,114:$VU}),{33:[1,171],34:$V31},o($Vd1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:172,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Ve1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:173,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vx,[2,25]),{22:$Vf1,25:174,55:$Vg1,57:$Vh1,58:$Vi1,59:$Vj1},o($VF,$Vv,{16:180,23:[1,181],31:$Vw,32:[1,182]}),o($Vk1,[2,39]),{33:[1,183]},o($Vk1,[2,44]),o($Vx,[2,28]),{22:[1,184]},o([2,5,14,17,22,24,31,33,34,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,94,102,103,104,105,106,107,108,110,111,112,113,114,115,120],[2,61],{23:[1,185]}),o($VE,$Vv,{16:186,31:$Vw,34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{22:[1,188],43:187},o($V21,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:189,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o([23,33,34,102,103,104,105,106,107,108,110,111,112,113,114,115],$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:190,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{34:[1,192],51:[1,191]},o($Vl1,$Vv,{16:193,31:$Vw}),{34:$VH,51:$Vc1,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{2:[1,197],22:[1,196],50:194,51:[1,195]},{42:[1,198]},o($Vx,[2,95]),{34:$VH,51:[1,199],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($Vz,[2,97]),{22:[1,200]},{22:[1,201]},{34:$VH,51:[1,202],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{49:[1,203]},{2:$V71,8:138,9:139,13:140,17:$V81,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,204],61:143,63:$V9,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf,88:205,89:$V91},o($VF,[2,127]),o($Vm1,[2,129]),o($Vm1,$Vv,{16:206,31:$Vw}),o($Vm1,[2,131]),o($Vm1,[2,132]),o($Vm1,$Vv,{16:207,31:$Vw}),o($Vm1,$Vv,{16:208,31:$Vw}),o($Vm1,$Vv,{16:209,31:$Vw}),o([2,17,22,31,37,38,39,44,63,70,74,75,76,82,85,87,89],[2,136]),{34:$VH,51:[1,210],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{34:$VH,51:[1,211],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($Vn1,[2,165],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vo1,[2,166],{34:$VH,103:$VK,104:$VL,105:$VM,106:$VN,113:$VT,114:$VU}),o($Vo1,[2,167],{34:$VH,103:$VK,104:$VL,105:$VM,106:$VN,113:$VT,114:$VU}),o($Vp1,[2,168],{34:$VH,105:$VM,106:$VN,113:$VT,114:$VU}),o($Vp1,[2,169],{34:$VH,105:$VM,106:$VN,113:$VT,114:$VU}),o($Va1,[2,170],{34:$VH,113:$VT,114:$VU}),o($Va1,[2,171],{34:$VH,113:$VT,114:$VU}),o([2,5,14,17,22,23,24,31,33,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,107,108,120],[2,173],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o([2,5,14,17,22,23,24,31,33,37,38,39,44,47,48,51,53,63,64,70,74,75,76,82,85,87,89,108,120],[2,174],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vq1,[2,176],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,111:$VR,112:$VS,113:$VT,114:$VU}),o($Vr1,[2,177],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,113:$VT,114:$VU}),o($Vr1,[2,178],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,113:$VT,114:$VU}),o($Vn1,[2,179],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vn1,[2,180],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vq1,[2,181],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,111:$VR,112:$VS,113:$VT,114:$VU}),{101:[1,212]},o($V$,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:213,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VY,[2,163]),o($VY,[2,186]),{49:[1,214]},{49:[1,215]},{34:$VH,51:[2,150],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{33:[1,216],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($VY,[2,172]),o($VY,[2,189]),{24:[1,217],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($VF,$Vs1,{16:218,31:$Vw,34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($V01,$Vv,{16:220,35:221,2:$V11,23:[1,219],31:$Vw}),o($Vt1,$Vu1,{56:222,2:$Vv1,32:$Vw1}),o($Vt1,$Vu1,{56:225,2:$Vv1,32:$Vw1}),o($Vt1,$Vu1,{56:226,2:$Vv1,32:$Vw1}),o($Vt1,$Vu1,{56:227,2:$Vv1,32:$Vw1}),o($Vx1,[2,84]),o($Vx,[2,29]),o([5,14,17,22,31,37,38,39,44,48,53,63,64,70,74,75,76,82,85,87,89],$VX,{28:228,2:[1,229],32:$Vk}),{33:[1,230]},o($Vy1,[2,37]),o($Vz1,$VA1,{35:231,2:$V11,23:$VB1,24:[1,232]}),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:234,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VE,[2,51]),{34:[1,236],44:[1,235]},{24:[1,237]},o($VE,$Vv,{16:238,31:$Vw,34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($V61,[2,45],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vl1,$Vv,{16:239,31:$Vw}),o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:240,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VY,[2,148]),{51:[1,241]},{24:[1,243],42:[1,242]},{24:[1,244],34:$VC1,51:$VD1,52:245},{51:[2,73]},{22:[1,248],54:247},o($Vx,[2,96]),{23:[1,249],31:[1,250],72:[1,251],73:[1,252]},{23:[1,253],31:[1,254]},{42:$VG,71:255},o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:256,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VF,[2,126]),o($Vm1,[2,128]),o($Vm1,[2,130]),o($Vm1,[2,133]),o($Vm1,[2,134]),o($Vm1,[2,135]),{42:$VE1,77:257},{42:[1,259]},o($VY,[2,162]),{33:[1,260],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{51:[1,261]},o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,123:262,20:263,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vb1,[2,90]),o($VW,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:264,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vx,[2,24]),o($Ve1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:265,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vx,[2,27]),o($Vk1,[2,41]),o($Vx1,[2,80],{32:$VF1}),{33:[1,267]},o($VG1,[2,88]),o($Vx1,[2,81],{32:$VF1}),o($Vx1,[2,82],{32:$VF1}),o($Vx1,[2,83],{32:$VF1}),o($VF,$Vv,{16:268,31:$Vw}),o($Vx,[2,191]),o($Vy1,[2,36]),o($Vk1,[2,38]),{22:$Vf1,25:269,55:$Vg1,57:$Vh1,58:$Vi1,59:$Vj1},o($Ve1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:270,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vn1,[2,60],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($VE,[2,55]),{22:[1,271]},o($VH1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:272,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VE,[2,52]),o($VY,[2,147]),{34:$VH,51:[2,149],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{24:[1,274],42:[1,273]},{2:$V0,8:278,9:279,11:280,12:281,13:282,14:$VI1,17:$VJ1,18:275,19:277,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,276],53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},{22:$Vf1,25:285,55:$Vg1,57:$Vh1,58:$Vi1,59:$Vj1},{22:$Vf1,25:286,55:$Vg1,57:$Vh1,58:$Vi1,59:$Vj1},{51:[2,72]},{22:[1,287]},{34:[1,289],44:[1,288]},{24:[1,290]},o($VK1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:291,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VK1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:292,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{22:[1,293]},{22:[1,294]},o($VK1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:295,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VK1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:296,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VF,[2,109]),{34:$VH,51:[1,297],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($VF,[2,111],{78:298,79:299,81:301,80:$VL1}),{2:$V71,8:138,9:139,13:140,17:$V81,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,303],61:143,63:$V9,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf,86:302,88:137,89:$V91},{83:304,84:305,85:$VM1,87:$VN1},o($Vb1,[2,89]),o($VY,[2,202]),{34:[1,309],51:[1,308]},{34:$VH,51:[2,206],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($Vn1,[2,192],{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($VF,$Vs1,{16:310,31:$Vw,34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{33:[1,311]},o($VG1,[2,86]),o($Vx,[2,30]),o($Vz1,$VA1,{35:312,2:$V11,23:$VB1}),o($Vx,$Vs1,{34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{24:[1,313]},{34:$VH,44:[2,57],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{2:$V0,8:278,9:279,11:280,12:281,13:282,14:$VI1,17:$VJ1,18:314,19:277,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,315],53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},{22:$Vf1,25:316,55:$Vg1,57:$Vh1,58:$Vi1,59:$Vj1},{2:$V0,8:278,9:279,11:280,12:281,13:282,14:$VI1,17:$VJ1,19:318,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,317],53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},o($Vg,[2,66]),o($VO1,[2,14]),o($VO1,[2,15]),o($VO1,[2,16]),o($VO1,[2,17]),o($VO1,[2,18]),o($VO1,[2,19]),o([14,17,31,34,37,38,39,44,53,63,64,70,74,75,76,82,102,103,104,105,106,107,108,110,111,112,113,114,115],$Vh,{20:42,40:51,29:54,28:55,116:56,30:58,119:61,15:319,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VO1,$Vv,{16:320,31:$Vw}),{42:[1,321]},{34:$VC1,51:$VD1,52:322},{24:[1,323],34:$VC1,51:$VD1,52:324},o($Vz,[2,77]),{22:[1,325]},{22:$Vf1,25:326,55:$Vg1,57:$Vh1,58:$Vi1,59:$Vj1},{31:[1,327],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{31:[1,328],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{51:[1,329]},{51:[1,330]},{31:[1,331],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{31:[1,332],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($VF,$Vv,{16:333,31:$Vw}),o($VF,[2,112]),o($VF,[2,113],{78:334,81:335,80:$VL1}),{42:$VE1,76:[1,337],77:336},o($VP1,[2,117]),{2:$V71,8:138,9:139,13:140,17:$V81,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,338],61:143,63:$V9,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf,88:205,89:$V91},o($VP1,[2,138]),{44:[1,339],84:340,85:$VM1,87:$VN1},o($VQ1,[2,121]),o($Vd1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:341,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{24:[1,342]},o($VY,[2,203]),o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:343,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($Vx,[2,26]),o($VG1,[2,85]),o($Vk1,[2,40]),o($VH1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:344,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{2:$V0,8:278,9:279,11:280,12:281,13:282,14:$VI1,17:$VJ1,19:318,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,345],53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},o($Vg,[2,64]),{42:[1,346]},o($Vg,[2,65]),o($VO1,[2,13]),o($VO1,$Vv,{16:347,31:$Vw}),o($VO1,[2,21]),{2:$V0,8:278,9:279,11:280,12:281,13:282,14:$VI1,17:$VJ1,18:348,19:277,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,349],53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},{51:[2,71]},{22:$Vf1,25:350,55:$Vg1,57:$Vh1,58:$Vi1,59:$Vj1},{51:[2,75]},{24:[1,351]},o($VR1,[2,79]),o($VK1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:352,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{9:353,22:$VS1,40:18,41:19},{42:$VG,71:355},{42:$VG,71:356},o($VK1,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:357,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),{9:358,22:$VS1,40:18,41:19},o($VF,[2,110]),o($VF,[2,114]),o($VP1,[2,116]),o($VF,[2,115]),{49:[1,359]},o($VP1,[2,137]),o($VF,[2,119]),o($VQ1,[2,120]),{24:[1,360],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($VQ1,[2,125],{21:13,29:14,30:15,40:18,41:19,65:24,66:25,67:26,68:27,69:28,88:137,8:138,9:139,13:140,61:143,86:361,2:$V71,17:$V81,22:$V3,37:$V4,38:$V5,39:$V6,63:$V9,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf,89:$V91}),{34:$VH,51:[2,205],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{34:$VH,44:[2,56],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($Vg,[2,63]),{2:$V0,8:278,9:279,11:280,12:281,13:282,14:$VI1,17:$VJ1,18:362,19:277,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,363],53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},o($VO1,[2,20]),{2:$V0,8:278,9:279,11:280,12:281,13:282,14:$VI1,17:$VJ1,19:318,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,364],53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},o($Vg,[2,70]),{34:$VC1,51:$VD1,52:365},{22:$Vf1,25:366,55:$Vg1,57:$Vh1,58:$Vi1,59:$Vj1},{31:[1,367],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{51:[1,368]},o($V41,$VB,{40:51,29:54,28:55,116:56,30:58,119:61,36:68,20:72,2:$Vi,22:$Vj,23:$VA,32:$Vk,45:$VC,46:$VD,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VF,[2,107]),o($VF,[2,108]),{31:[1,369],34:$VH,94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{51:[1,370]},o($VZ,$VX,{40:51,29:54,28:55,116:56,30:58,119:61,20:371,2:$Vi,22:$Vj,32:$Vk,49:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,109:$Vt,117:$Vu}),o($VQ1,[2,123],{21:13,29:14,30:15,40:18,41:19,65:24,66:25,67:26,68:27,69:28,88:137,8:138,9:139,13:140,61:143,86:372,2:$V71,17:$V81,22:$V3,37:$V4,38:$V5,39:$V6,63:$V9,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf,89:$V91}),o($VQ1,[2,124],{21:13,29:14,30:15,40:18,41:19,65:24,66:25,67:26,68:27,69:28,8:138,9:139,13:140,61:143,88:205,2:$V71,17:$V81,22:$V3,37:$V4,38:$V5,39:$V6,63:$V9,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf,89:$V91}),{2:$V0,8:278,9:279,11:280,12:281,13:282,14:$VI1,17:$VJ1,19:318,21:13,22:$V3,29:14,30:15,37:$V4,38:$V5,39:$V6,40:18,41:19,44:[1,373],53:$V8,61:22,62:23,63:$V9,64:$Va,65:24,66:25,67:26,68:27,69:28,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf},o($Vg,[2,68]),o($Vg,[2,69]),{51:[2,74]},o($VR1,[2,78]),{9:374,22:$VS1,40:18,41:19},{42:$VG,71:375},{9:376,22:$VS1,40:18,41:19},{42:$VG,71:377},{34:$VH,51:[1,378],94:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,107:$VO,108:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($VQ1,[2,122],{21:13,29:14,30:15,40:18,41:19,65:24,66:25,67:26,68:27,69:28,8:138,9:139,13:140,61:143,88:205,2:$V71,17:$V81,22:$V3,37:$V4,38:$V5,39:$V6,63:$V9,70:$Vb,74:$Vc,75:$Vd,76:$Ve,82:$Vf,89:$V91}),o($Vg,[2,67]),{51:[1,379]},o($VF,[2,104]),{51:[1,380]},o($VF,[2,106]),{42:$VE1,77:381},{42:$VG,71:382},{42:$VG,71:383},o($VP1,[2,118]),o($VF,[2,103]),o($VF,[2,105])],
defaultActions: {29:[2,48],30:[2,49],31:[2,50],39:[2,1],197:[2,73],245:[2,72],322:[2,71],324:[2,75],365:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  // codigo para ir armando el ast
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 37;
break;
case 4:return 38;
break;
case 5:return 39
break;
case 6:return 48;
break;
case 7:return 55;
break;
case 8:return 57;
break;
case 9:return 'RBOOLEAN';
break;
case 10:return 53
break;
case 11:return 75;
break;
case 12:return 74;
break;
case 13:return 76;
break;
case 14:return 80;
break;
case 15:return 70;
break;
case 16:return 82;
break;
case 17:return 85;
break;
case 18:return 87;
break;
case 19:return 89;
break;
case 20:return 17;
break;
case 21:return 14;
break;
case 22:return 59;
break;
case 23:return 96;
break;
case 24:return 97;
break;
case 25:return 63;
break;
case 26:return 64;
break;
case 27:return 117;
break;
case 28:return 72;
break;
case 29:return 73;
break;
case 30:return 122
break;
case 31:return 121
break;
case 32:return 101
break;
case 33:return 24;
break;
case 34:return 31;
break;
case 35:return 42;
break;
case 36:return 44;
break;
case 37:return 49;
break;
case 38:return 51;
break;
case 39:return 34;
break;
case 40:return 47;
break;
case 41:return 32;
break;
case 42:return 33;
break;
case 43:return 120;
break;
case 44:return 110;
break;
case 45:return 45;
break;
case 46:return 46;
break;
case 47:return 105;
break;
case 48:return 'AUTOSUM';
break;
case 49:return 107
break;
case 50:return 108;
break;
case 51:return 109;
break;
case 52:return 102;
break;
case 53:return 94;
break;
case 54:return 103;
break;
case 55:return 104;
break;
case 56:return 106;
break;
case 57:return 112;
break;
case 58:return 111;
break;
case 59:return 115;
break;
case 60:return 114;
break;
case 61:return 113;
break;
case 62:return 23;
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 99; 
break;
case 64: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 99; 
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 100; 
break;
case 66:return 98;
break;
case 67:return 95;
break;
case 68:return 22;
break;
case 69:return 5;
break;
case 70: console.log('error :v') 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:let\b)/,/^(?:const\b)/,/^(?:var\b)/,/^(?:function\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:null\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:length\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:!=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:`[^\`]*`)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:(_?[a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}