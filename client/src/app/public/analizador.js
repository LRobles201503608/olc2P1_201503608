/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,12],$V2=[1,13],$V3=[1,17],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,20],$V8=[1,21],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[2,5,15,18,21,34,35,36,41,45,50,58,59,65,69,70,71,77],$Vh=[1,58],$Vi=[1,50],$Vj=[1,59],$Vk=[1,52],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[1,53],$Vt=[1,57],$Vu=[2,28],$Vv=[1,62],$Vw=[2,5,15,18,21,30,34,35,36,41,45,50,58,59,65,69,70,71,77,80,82,84],$Vx=[2,5,15,18,21,30,34,35,36,41,45,50,58,59,65,69,70,71,77],$Vy=[2,48],$Vz=[1,66],$VA=[1,68],$VB=[1,69],$VC=[1,67],$VD=[2,5,15,18,21,34,35,36,41,45,48,50,58,59,65,69,70,71,77],$VE=[2,5,15,18,21,34,35,36,41,45,50,58,59,65,69,70,71,77,80,82,84],$VF=[1,77],$VG=[1,82],$VH=[1,81],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[1,92],$VS=[1,93],$VT=[1,94],$VU=[2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,88,95,96,97,98,99,100,101,103,104,105,106,107,108,112],$VV=[1,98],$VW=[1,133],$VX=[1,130],$VY=[1,134],$VZ=[1,129],$V_=[2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,88,95,96,97,98,99,100,101,103,104,105,108,112],$V$=[2,5,15,18,21,22,23,30,31,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,88,95,96,97,98,99,100,101,103,104,105,106,107,108,112],$V01=[1,159],$V11=[1,156],$V21=[1,157],$V31=[1,158],$V41=[1,160],$V51=[2,5,15,18,21,30,34,35,36,41,44,45,50,58,59,65,69,70,71,77,80,82,84],$V61=[2,5,15,18,21,23,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,88,95,96,97,98,99,100,101,103,104,105,106,107,108,112],$V71=[33,48],$V81=[1,175],$V91=[1,176],$Va1=[2,18,21,34,35,36,41,58,65,69,70,71,77,80,82,84],$Vb1=[2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,88,95,100,101,103,104,105,108,112],$Vc1=[2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,88,95,96,97,100,101,103,104,105,108,112],$Vd1=[2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,100,101,103,108,112],$Ve1=[2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,100,101,103,104,105,108,112],$Vf1=[2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,112],$Vg1=[2,5,15,18,21,22,30,33,34,35,36,39,41,45,48,50,58,59,65,69,70,71,77,80,82,84],$Vh1=[1,218],$Vi1=[2,5,15,18,21,30,33,34,35,36,41,45,50,58,59,65,69,70,71,77,80,82,84],$Vj1=[1,243],$Vk1=[1,249],$Vl1=[1,250],$Vm1=[33,41],$Vn1=[2,5,15,18,21,34,35,36,41,45,50,58,59,65,69,70,71,75,77,80,82,84],$Vo1=[41,80,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"inicio":4,"EOF":5,"l_ins":6,"ins":7,"asignacion_declaracion":8,"asignacion":9,"metodo_funcion":10,"structs":11,"funciones_nativas":12,"sentencias":13,"llamado_funcion":14,"RETURN":15,"retorno":16,"final_linea":17,"CONTINUE":18,"expresion":19,"constancia":20,"IDENTIFICADOR":21,"IGUAL":22,"DOSP":23,"tipo":24,"lista_asigna":25,"TIPO":26,"arreglo_mat":27,"arreglo_params":28,"acceso":29,"PYCOMA":30,"CORCHETEA":31,"CORCHETEC":32,"COMA":33,"RLET":34,"RCONST":35,"RVAR":36,"actualizar":37,"asignacion_types":38,"LLA":39,"contenido_types":40,"LLC":41,"INCREMENTO":42,"DECREMENTO":43,"PUNTO":44,"RFUNCTION":45,"PARENTA":46,"parametro":47,"PARENTC":48,"parametro2":49,"RTYPE":50,"contenido_struct":51,"RSTRING":52,"RINT":53,"boolean":54,"VOID":55,"imprimir":56,"graficar":57,"PRINT":58,"RGRAFICA":59,"sentenciafor":60,"sentenciawhile":61,"sentenciadowhile":62,"sentenciaif":63,"sentenciaswitch":64,"FOR":65,"cuerposentencia":66,"ROF":67,"RIN":68,"WHILE":69,"DO":70,"IF":71,"cuerposentencia2":72,"selse":73,"selseif":74,"ELSE":75,"sinosi":76,"SWITCH":77,"listacase":78,"cases":79,"CASE":80,"instrucciones_funciones":81,"DEFAULT":82,"instru_f":83,"BREAK":84,"instrucciones_funciones2":85,"instru_f2":86,"parametraje":87,"MENOS":88,"ENTERO":89,"TRUE":90,"FALSE":91,"DECIMAL":92,"CADENA":93,"CADENAE":94,"MAS":95,"POR":96,"DIVIDIDO":97,"POT":98,"MOD":99,"AND":100,"OR":101,"NOT":102,"DIF":103,"MAYIGU":104,"MENIGU":105,"MAY":106,"MEN":107,"IG":108,"op_terna":109,"RNULL":110,"condicion":111,"INTERROGACION":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"RETURN",18:"CONTINUE",21:"IDENTIFICADOR",22:"IGUAL",23:"DOSP",26:"TIPO",30:"PYCOMA",31:"CORCHETEA",32:"CORCHETEC",33:"COMA",34:"RLET",35:"RCONST",36:"RVAR",39:"LLA",41:"LLC",42:"INCREMENTO",43:"DECREMENTO",44:"PUNTO",45:"RFUNCTION",46:"PARENTA",48:"PARENTC",50:"RTYPE",52:"RSTRING",53:"RINT",54:"boolean",55:"VOID",58:"PRINT",59:"RGRAFICA",65:"FOR",67:"ROF",68:"RIN",69:"WHILE",70:"DO",71:"IF",75:"ELSE",77:"SWITCH",80:"CASE",82:"DEFAULT",84:"BREAK",88:"MENOS",89:"ENTERO",90:"TRUE",91:"FALSE",92:"DECIMAL",93:"CADENA",94:"CADENAE",95:"MAS",96:"POR",97:"DIVIDIDO",98:"POT",99:"MOD",100:"AND",101:"OR",102:"NOT",103:"DIF",104:"MAYIGU",105:"MENIGU",106:"MAY",107:"MEN",108:"IG",110:"RNULL",112:"INTERROGACION"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[7,2],[16,1],[16,0],[8,5],[8,3],[8,7],[8,5],[8,3],[8,5],[8,7],[8,4],[8,6],[8,1],[8,1],[17,1],[17,0],[27,3],[27,2],[25,3],[25,1],[28,3],[28,1],[20,1],[20,1],[20,1],[9,4],[9,1],[9,1],[38,5],[40,5],[40,3],[37,2],[37,2],[29,5],[29,3],[29,1],[10,8],[10,7],[10,7],[10,6],[10,10],[10,9],[10,9],[10,8],[47,3],[47,1],[47,1],[49,3],[49,1],[11,6],[51,5],[51,3],[24,1],[24,1],[24,1],[24,1],[24,1],[12,1],[12,1],[56,3],[56,4],[57,3],[13,1],[13,1],[13,1],[13,1],[13,1],[60,9],[60,8],[60,8],[61,5],[62,7],[63,5],[63,6],[63,6],[63,7],[73,2],[74,2],[74,1],[76,6],[64,7],[78,2],[78,1],[79,4],[79,3],[79,3],[79,2],[66,3],[66,2],[81,2],[81,1],[83,2],[83,1],[83,2],[83,2],[83,2],[83,1],[83,1],[72,3],[72,2],[85,2],[85,1],[86,2],[86,1],[86,2],[86,2],[86,1],[86,1],[14,5],[14,4],[87,3],[87,1],[19,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,1],[19,1],[19,1],[19,1],[109,5],[111,3],[111,3],[111,2],[111,3],[111,3],[111,3],[111,3],[111,3],[111,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
        
break;
case 75: case 76: case 77: case 78: case 79: case 105: case 109: case 116: case 133: case 150:
this.$=$$[$0];
break;
case 100: case 104: case 108: case 111: case 115: case 118:
this.$=$$[$0-1];
break;
case 101: case 112:
this.$="VACIO"
break;
case 102: case 113:
$$[$0-1].push($$[$0]);  this.$ = $$[$0-1];
break;
case 103: case 114:
this.$ = [$$[$0]];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},{1:[3]},{5:[1,39]},{2:$V0,5:[2,2],7:40,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o([5,15,18,30,34,35,36,41,45,50,58,59,65,69,70,71,77],[2,15],{16:41,19:42,37:51,14:54,27:55,109:56,111:60,2:$Vh,21:$Vi,31:$Vj,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,110:$Vt}),o($Vg,$Vu,{17:61,30:$Vv}),{21:[1,63],25:64},o($Vw,[2,25],{44:[1,65]}),o($Vx,[2,26]),o([2,5,15,18,21,34,35,36,41,44,45,50,58,59,65,69,70,71,77],$Vy,{22:$Vz,42:$VA,43:$VB,46:$VC}),o($VD,[2,39]),o($VD,[2,40]),{21:[1,70]},{21:[1,71]},o($Vg,[2,70]),o($Vg,[2,71]),o($VE,[2,75]),o($VE,[2,76]),o($VE,[2,77]),o($VE,[2,78]),o($VE,[2,79]),{21:[2,35]},{21:[2,36]},{21:[2,37]},{46:[1,72]},{46:[1,73]},{46:[1,74]},{46:[1,75]},{39:$VF,66:76},{46:[1,78]},{46:[1,79]},{1:[2,1]},o($Vg,[2,3]),o($Vg,$Vu,{17:80,30:$Vv}),o($Vx,[2,14],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),{2:$Vh,14:54,19:95,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VU,[2,126]),o($VU,[2,127]),o($VU,[2,128]),o($VU,[2,129]),o($VU,[2,130]),o($VU,[2,131]),o($VU,[2,132],{42:$VA,43:$VB,46:$VC}),o($VU,[2,133]),{2:$Vh,14:54,19:96,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:97,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VU,[2,150]),o($VU,[2,151],{31:$VV}),o($VU,[2,152]),o($VU,[2,153]),o($VU,[2,154]),{32:[1,99]},{112:[1,100]},o($Vg,[2,13]),o($VU,[2,27]),o([2,5,15,18,21,33,34,35,36,41,45,50,58,59,65,69,70,71,77,80,82,84],[2,32],{17:102,27:104,22:[1,101],23:[1,103],30:$Vv,31:$Vj}),o($VE,$Vu,{17:105,23:[1,106],30:$Vv,33:[1,107]}),{21:[1,108]},{2:$Vh,14:54,19:109,21:$Vi,27:55,31:$Vj,37:51,39:[1,110],46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:113,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,48:[1,112],87:111,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VU,[2,44]),o($VU,[2,45]),{46:[1,114]},{22:[1,115]},{2:$Vh,14:54,19:117,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,48:[1,116],88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{48:[1,118]},{2:$V0,8:119,20:14,21:[1,121],29:15,34:[1,120],35:$V5,36:$V6},{2:$Vh,14:54,19:122,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{69:[1,123]},{2:$VW,8:127,13:128,14:132,18:$VX,20:14,21:$VY,29:15,34:$V4,35:$V5,36:$V6,41:[1,125],56:131,58:$V9,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf,81:124,83:126,84:$VZ},{2:$Vh,14:54,19:135,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:136,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($Vg,[2,12]),{2:$Vh,14:54,19:137,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:138,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:139,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:140,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:141,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:142,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:143,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:144,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:145,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:146,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:147,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:148,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:149,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:150,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($V_,[2,125],{106:$VR,107:$VS}),{48:[1,151],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},o($V_,[2,143],{106:$VR,107:$VS}),{32:[1,152]},o($V$,[2,30]),{2:$Vh,14:54,19:153,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$Vh,14:54,19:154,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($Vw,[2,17]),{21:$V01,24:155,52:$V11,53:$V21,54:$V31,55:$V41},o($VE,$Vu,{17:161,22:[1,162],30:$Vv,31:$VV}),o($Vw,[2,20]),{26:[1,163]},{21:[1,164]},o($V51,[2,47],{22:[1,165]}),o($VD,$Vu,{17:166,30:$Vv,88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),{21:[1,168],40:167},{33:[1,170],48:[1,169]},o($V61,$Vu,{17:171,30:$Vv}),o($V71,[2,124],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),{2:$V81,21:$V91,47:172,48:[1,173],49:174},{39:[1,177]},o($Vw,[2,72]),{48:[1,178],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},o($Vg,[2,74]),{30:[1,179]},{21:[1,180]},o([30,44],$Vy),{48:[1,181],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},{46:[1,182]},{2:$VW,8:127,13:128,14:132,18:$VX,20:14,21:$VY,29:15,34:$V4,35:$V5,36:$V6,41:[1,183],56:131,58:$V9,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf,83:184,84:$VZ},o($VE,[2,101]),o($Va1,[2,103]),o($Va1,$Vu,{17:185,30:$Vv}),o($Va1,[2,105]),o($Va1,$Vu,{17:186,30:$Vv}),o($Va1,$Vu,{17:187,30:$Vv}),o($Va1,$Vu,{17:188,30:$Vv}),o($Va1,[2,109]),o([2,18,21,30,34,35,36,41,58,65,69,70,71,77,80,82,84],[2,110]),o([2,18,21,30,34,35,36,41,44,58,65,69,70,71,77,80,82,84],$Vy,{46:$VC}),{48:[1,189],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},{48:[1,190],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},o($Vb1,[2,134],{96:$VI,97:$VJ,98:$VK,99:$VL,106:$VR,107:$VS}),o($Vb1,[2,135],{96:$VI,97:$VJ,98:$VK,99:$VL,106:$VR,107:$VS}),o($Vc1,[2,136],{98:$VK,99:$VL,106:$VR,107:$VS}),o($Vc1,[2,137],{98:$VK,99:$VL,106:$VR,107:$VS}),o($V_,[2,138],{106:$VR,107:$VS}),o($V_,[2,139],{106:$VR,107:$VS}),o([2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,100,101,112],[2,141],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o([2,5,15,18,21,23,30,33,34,35,36,41,44,45,48,50,58,59,65,69,70,71,77,80,82,84,101,112],[2,142],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($Vd1,[2,144],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,104:$VP,105:$VQ,106:$VR,107:$VS}),o($Ve1,[2,145],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,106:$VR,107:$VS}),o($Ve1,[2,146],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,106:$VR,107:$VS}),o($Vf1,[2,147],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($Vf1,[2,148],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($Vd1,[2,149],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,104:$VP,105:$VQ,106:$VR,107:$VS}),o($VU,[2,140]),o($V$,[2,29]),{23:[1,191],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},o($VE,$Vu,{17:192,30:$Vv,88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($VE,$Vu,{17:194,22:[1,193],30:$Vv}),o($Vg1,[2,65]),o($Vg1,[2,66]),o($Vg1,[2,67]),o($Vg1,[2,68]),o($Vg1,[2,69]),o($Vw,[2,23]),{2:$Vh,14:54,19:196,21:$Vi,27:55,28:195,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VE,$Vu,{17:197,22:[1,198],30:$Vv}),o([2,5,15,18,21,23,30,33,34,35,36,41,45,50,58,59,65,69,70,71,77,80,82,84],[2,31]),{2:$Vh,14:54,19:199,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VD,[2,38]),{33:[1,201],41:[1,200]},{23:[1,202]},o($V61,$Vu,{17:203,30:$Vv}),{2:$Vh,14:54,19:204,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VU,[2,122]),{48:[1,205]},{23:[1,207],39:[1,206]},{33:[1,208],48:[2,58]},{48:[2,59]},o($V71,[2,61],{23:[1,209]}),{21:[1,211],51:210},o($Vw,[2,73]),{2:$Vh,14:54,19:212,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{67:[1,213],68:[1,214]},{39:$VF,66:215},{2:$Vh,14:54,19:216,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VE,[2,100]),o($Va1,[2,102]),o($Va1,[2,104]),o($Va1,[2,106]),o($Va1,[2,107]),o($Va1,[2,108]),{39:$Vh1,72:217},{39:[1,219]},{2:$Vh,14:54,19:220,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($Vw,[2,16]),{2:$Vh,14:54,19:221,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($Vw,[2,19]),o($VE,$Vu,{17:222,30:$Vv,33:[1,223]}),o($Vi1,[2,34],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($Vw,[2,21]),{2:$Vh,14:54,19:224,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($V51,[2,46],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($VD,[2,41]),{21:[1,225]},{2:$Vh,14:54,19:226,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VU,[2,121]),o($V71,[2,123],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),{23:[1,228],39:[1,227]},{2:$V0,6:229,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,41:[1,230],45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},{21:$V01,24:231,52:$V11,53:$V21,54:$V31,55:$V41},{2:$V81,21:$V91,47:232,49:174},{21:$V01,24:233,52:$V11,53:$V21,54:$V31,55:$V41},{33:[1,235],41:[1,234]},{23:[1,236]},{30:[1,237],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},{21:[1,238]},{21:[1,239]},o($VE,[2,83]),{48:[1,240],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},o($VE,[2,85],{73:241,74:242,76:244,75:$Vj1}),{2:$VW,8:127,13:128,14:132,18:$VX,20:14,21:$VY,29:15,34:$V4,35:$V5,36:$V6,41:[1,246],56:131,58:$V9,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf,81:245,83:126,84:$VZ},{78:247,79:248,80:$Vk1,82:$Vl1},o($Vf1,[2,155],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($VE,$Vu,{17:251,30:$Vv,88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($Vw,[2,24]),{2:$Vh,14:54,19:252,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($VE,$Vu,{17:253,30:$Vv,88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),{23:[1,254]},o($Vm1,[2,43],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),{2:$V0,6:255,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,41:[1,256],45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},{21:$V01,24:257,52:$V11,53:$V21,54:$V31,55:$V41},{2:$V0,7:40,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,41:[1,258],45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},o($Vg,[2,52]),{39:[1,259]},{48:[2,57]},o($V71,[2,60]),o($Vg,[2,62]),{21:[1,260]},{21:$V01,24:261,52:$V11,53:$V21,54:$V31,55:$V41},{9:262,21:[1,263],37:18,38:19},{48:[1,264]},{48:[1,265]},o($VE,$Vu,{17:266,30:$Vv}),o($VE,[2,86]),o($VE,[2,87],{73:267,76:268,75:$Vj1}),{39:$Vh1,71:[1,270],72:269},o($Vn1,[2,91]),{2:$VW,8:127,13:128,14:132,18:$VX,20:14,21:$VY,29:15,34:$V4,35:$V5,36:$V6,41:[1,271],56:131,58:$V9,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf,83:184,84:$VZ},o($Vn1,[2,112]),{41:[1,272],79:273,80:$Vk1,82:$Vl1},o($Vo1,[2,95]),{2:$Vh,14:54,19:274,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{23:[1,275]},o($Vw,[2,18]),o($Vi1,[2,33],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($Vw,[2,22]),{2:$Vh,14:54,19:276,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},{2:$V0,7:40,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,41:[1,277],45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},o($Vg,[2,50]),{39:[1,278]},o($Vg,[2,51]),{2:$V0,6:279,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,41:[1,280],45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},{23:[1,281]},o($Vm1,[2,64]),{48:[1,282]},{22:$Vz,42:$VA,43:$VB},{39:$VF,66:283},{39:$VF,66:284},o($VE,[2,84]),o($VE,[2,88]),o($Vn1,[2,90]),o($VE,[2,89]),{46:[1,285]},o($Vn1,[2,111]),o($VE,[2,93]),o($Vo1,[2,94]),{23:[1,286],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},o($Vo1,[2,99],{20:14,29:15,60:24,61:25,62:26,63:27,64:28,83:126,8:127,13:128,56:131,14:132,81:287,2:$VW,18:$VX,21:$VY,34:$V4,35:$V5,36:$V6,58:$V9,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf,84:$VZ}),o($Vm1,[2,42],{88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT}),o($Vg,[2,49]),{2:$V0,6:288,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,41:[1,289],45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},{2:$V0,7:40,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,41:[1,290],45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},o($Vg,[2,56]),{21:$V01,24:291,52:$V11,53:$V21,54:$V31,55:$V41},{39:$VF,66:292},o($VE,[2,81]),o($VE,[2,82]),{2:$Vh,14:54,19:293,21:$Vi,27:55,31:$Vj,37:51,46:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr,102:$Vs,109:56,110:$Vt,111:60},o($Vo1,[2,97],{20:14,29:15,60:24,61:25,62:26,63:27,64:28,83:126,8:127,13:128,56:131,14:132,81:294,2:$VW,18:$VX,21:$VY,34:$V4,35:$V5,36:$V6,58:$V9,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf,84:$VZ}),o($Vo1,[2,98],{20:14,29:15,60:24,61:25,62:26,63:27,64:28,8:127,13:128,56:131,14:132,83:184,2:$VW,18:$VX,21:$VY,34:$V4,35:$V5,36:$V6,58:$V9,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf,84:$VZ}),{2:$V0,7:40,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,18:$V2,20:14,21:$V3,29:15,34:$V4,35:$V5,36:$V6,37:18,38:19,41:[1,295],45:$V7,50:$V8,56:22,57:23,58:$V9,59:$Va,60:24,61:25,62:26,63:27,64:28,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf},o($Vg,[2,54]),o($Vg,[2,55]),o($Vm1,[2,63]),o($VE,[2,80]),{48:[1,296],88:$VG,95:$VH,96:$VI,97:$VJ,98:$VK,99:$VL,100:$VM,101:$VN,103:$VO,104:$VP,105:$VQ,106:$VR,107:$VS,108:$VT},o($Vo1,[2,96],{20:14,29:15,60:24,61:25,62:26,63:27,64:28,8:127,13:128,56:131,14:132,83:184,2:$VW,18:$VX,21:$VY,34:$V4,35:$V5,36:$V6,58:$V9,65:$Vb,69:$Vc,70:$Vd,71:$Ve,77:$Vf,84:$VZ}),o($Vg,[2,53]),{39:$Vh1,72:297},o($Vn1,[2,92])],
defaultActions: {29:[2,35],30:[2,36],31:[2,37],39:[2,1],175:[2,59],232:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 34;
break;
case 4:return 35;
break;
case 5:return 36
break;
case 6:return 45;
break;
case 7:return 52;
break;
case 8:return 53;
break;
case 9:return 'RBOOLEAN';
break;
case 10:return 50
break;
case 11:return 70;
break;
case 12:return 69;
break;
case 13:return 71;
break;
case 14:return 75;
break;
case 15:return 65;
break;
case 16:return 77;
break;
case 17:return 80;
break;
case 18:return 82;
break;
case 19:return 84;
break;
case 20:return 18;
break;
case 21:return 15;
break;
case 22:return 55;
break;
case 23:return 90;
break;
case 24:return 91;
break;
case 25:return 58;
break;
case 26:return 59;
break;
case 27:return 110;
break;
case 28:return 67;
break;
case 29:return 68;
break;
case 30:return 'PUSH'
break;
case 31:return 'POP'
break;
case 32:return 'LENGTH'
break;
case 33:return 23;
break;
case 34:return 30;
break;
case 35:return 39;
break;
case 36:return 41;
break;
case 37:return 46;
break;
case 38:return 48;
break;
case 39:return 33;
break;
case 40:return 44;
break;
case 41:return 31;
break;
case 42:return 32;
break;
case 43:return 112;
break;
case 44:return 103;
break;
case 45:return 42;
break;
case 46:return 43;
break;
case 47:return 98;
break;
case 48:return 'AUTOSUM';
break;
case 49:return 100
break;
case 50:return 101;
break;
case 51:return 102;
break;
case 52:return 95;
break;
case 53:return 88;
break;
case 54:return 96;
break;
case 55:return 97;
break;
case 56:return 99;
break;
case 57:return 105;
break;
case 58:return 104;
break;
case 59:return 108;
break;
case 60:return 107;
break;
case 61:return 106;
break;
case 62:return 22;
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93; 
break;
case 64: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93; 
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 94; 
break;
case 66:return 92;
break;
case 67:return 89;
break;
case 68:return 21;
break;
case 69:return 5;
break;
case 70: 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:let\b)/,/^(?:const\b)/,/^(?:var\b)/,/^(?:function\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:null\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Length\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:!=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:`[^\`]*`)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:(_?[a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}